openapi: 3.0.3
info:
  title: Jaram Hub Api 문서
  version: 1.0.0
paths:
  /hubapi/category/:
    get:
      operationId: category_list
      description: 카테고리 데이터를 가져옵니다.
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: 카테고리 데이터를 10개씩 끊어서 가져올 때 페이지 번호입니다.
      tags:
      - category
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: category_create
      description: 카테고리 데이터를 생성합니다. 요청한 데이터가 이미 존재할 경우 오류를 리턴합니다.
      tags:
      - category
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Category'
                - $ref: '#/components/schemas/CategoryList'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Category'
                  - $ref: '#/components/schemas/CategoryList'
          description: ''
  /hubapi/category/{category_id_pk}/:
    get:
      description: 특정 카테고리 데이터를 가져옵니다.
      operationId: category_retrieve
      parameters:
      - in: path
        name: category_id_pk
        description: 가져올 카테고리 데이터의 pk
        schema:
          type: string
        required: true
      tags:
      - category
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: category_partial_update
      description: 특정 카테고리 데이터의 이름을 변경합니다.
      parameters:
      - in: path
        name: category_id_pk
        description: 수정할 카테고리 데이터의 pk
        schema:
          type: string
        required: true
      tags:
      - category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: category_destroy
      description: 특정 카테고리 데이터를 삭제합니다.
      parameters:
      - in: path
        name: category_id_pk
        description: 삭제할 카테고리 데이터의 pk
        schema:
          type: string
        required: true
      tags:
      - category
      responses:
        '204':
          description: No response body
components:
  schemas:
    Category:
      type: object
      properties:
        category_id_pk:
          type: integer
          readOnly: true
          description: '카테고리 pk'
        category_name:
          type: string
          maxLength: 20
          description: '카테고리 이름'
      required:
      - category_id_pk
      - category_name
    CategoryList:
      type: array
      items:
        $ref: '#/components/schemas/Category'
      example:
        - category_id_pk: 0
          category_name: 'string'
    PaginatedCategoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
          description: 가져온 카테고리의 개수
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
          description: 다음 페이지 uri. 다음 페이지가 없으면 null
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
          description: 이전 페이지 uri. 이전 페이지가 없으면 null
        results:
          type: array
          description: 카테고리 데이터 리스트
          items:
            $ref: '#/components/schemas/Category'
    PatchedCategory:
      type: object
      properties:
        category_id_pk:
          type: integer
          readOnly: true
        category_name:
          type: string
          maxLength: 20
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
