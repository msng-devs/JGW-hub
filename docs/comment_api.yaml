\hubapi\comment\:
  get:
    operationId: comment_list
    description: |
      댓글 목록을 가져옵니다.
      ## Router Option
      | option | value |
      |:---:|:---:|
      | 인증필요 | x |
      | 권한필요 | x |
    parameters:
      - name: page
        required: false
        in: query
        description: 몇번째 페이지를 가져올지 지정합니다.
        schema:
          type: integer
          default: 1
      - name: page_size
        required: false
        in: query
        description: 한 페이지에 몇개의 데이터를 가져올지 지정합니다.
        schema:
          type: integer
          minimum: 1
          maximum: 25
          default: 10
      - name: post_id
        required: true
        in: query
        description: |
          어떤 게시글에 작성된 댓글을 가져올지 지정합니다.
          게시글 번호를 지정하지 않으면 400을 응답합니다.
        schema:
          type: integer
    tags:
    - comment-v1
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginatedCommentGetList'
      '404':
        description: Not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardErrorPost-404'
            example:
              detail: Invalid page.
  post:
    operationId: comment_create
    description: |
      댓글을 작성합니다. 쓰기 요청한 유저의 권한이 작성하려는 게시판의 댓글 쓰기 레벨(Board.role_role_pk_comment_write_level)과 같거나 더 높아야 글 작성이 가능합니다.<br>
      admin은 게시판의 쓰기 권한과 상관 없이 댓글 작성이 가능합니다.
      ## Router Option
      | option | value |
      |:---:|:---:|
      | 인증필요 | o |
      | 권한필요 | 게시판의 댓글 권한 이상 or admin |
    tags:
      - comment-v1
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentCreate'
      required: true
    responses:
      '201':
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentGet2'
      '400':
        description: Bad request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardErrorPost-400'
            example:
              detail: board with this category name already exists.
      '403':
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardErrorPost-403'
            example:
              timestamp: "2023-10-09T14:30:00.000000Z"  # 이 예시를 현재 시간으로 변경하세요.
              status: 403
              error: Forbidden
              code: JGW_hub-comment-002
              message: Comment create denied
              path: /hub/api/v1/comment/

      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardErrorPost-500'
            example:
              timestamp: "2023-10-09T14:30:00.000000Z"
              status: 500
              error: Internal server error
              code: JGW_hub-check-001
              message: get user information failed
              path: ""

\hubapi\comment\{comment_id_pk}\:
  patch:
    operationId: comment_partial_update
    description: |
      지정한 댓글의 데이터를 수정합니다. 요청한 유저가 댓글을 작성한 본인이면서 요청한 유저의 권한이 수정하려는 게시글이 속한 게시판의 댓글 쓰기 레벨과 같거나 더 높아야 글 수정이 가능합니다.<br>
      admin도 본인이 아니면 글 수정이 불가능합니다.<br>
      ## Router Option
      | option | value |
      |:---:|:---:|
      | 인증필요 | o |
      | 권한필요 | (수정요청 유저의 pk == 작성한 본인 and<br>수정요청 유저의 권한 >= 수정하려는 글이 속한 게시판의 댓글 쓰기 권한) |
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentPatch'
      required: true
    tags:
      - comment-v1
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPatchResult'
      '403':
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardErrorPost-403'
            example:
              timestamp: "2023-10-09T14:30:00.000000Z"
              status: 403
              error: Forbidden
              code: JGW_hub-comment-003
              message: Comment patch denied
              path: /hub/api/v1/comment/
      '500':
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardErrorPost-500'
            example:
              timestamp: "2023-10-09T14:30:00.000000Z"
              status: 500
              error: Internal server error
              code: JGW_hub-check-001
              message: get user information failed
              path: ""
  delete:
    operationId: comment_destroy
    description: |
      지정한 댓글을 삭제합니다. 글을 쓴 본인 또는 관리자만 삭제가 가능합니다. 데이터를 실제로 삭제하지 않고 comment_delete를 1로 변경합니다.
      ## Router Option
      | option | value |
      |:---:|:---:|
      | 인증필요 | o |
      | 권한필요 | 글 작성 본인 or admin |
    parameters:
    - in: path
      name: comment_id
      schema:
        type: integer
      required: true
      description: 삭제할 댓글 pk
    tags:
      - comment-v1
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPatchResult'

      '403':
        description: Forbidden
        content:
          application/json:
            example:
              timestamp: "2023-10-09T14:30:00.000000Z"
            status: 403
            error: Forbidden
            code: JGW_hub-comment-004
            message: Comment delete denied
            path: ""

      '404':
        description: Not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardErrorPost-404'
            example:
              detail: Invalid page.
