openapi: 3.1.0
info:
  title: 자람 허브 API v2
  description: >

    FastAPI로 재작성된 자람 허브 API v2 문서입니다.


    ## 개요

    자람 허브 API v2는 기존 Django로 작성되었던 자람 허브 API를 FastAPI로 재작성한 API입니다.

    기존 자람 허브 API 문서에 있는 기능들을 url을 v1에서 v2로 변경하여 모두 그대로 사용이 가능합니다. 


    (예: /hub/api/v1/board/ -> /hub/api/v2/board/)



    ## V2 변경 사항


    1. **Comment API에서 게시물의 모든 댓글을 불러오는 기능의 응답 데이터 변경 -> reply 필드 삭제.**

        변경 내용된 response 예시는 다음과 같습니다.
        
        - 기존 응답 데이터
        ```json
            {
              "count": 123,
              "next": "https://api.jaramgroupware.cloud/hub/api/v1/post/?page=4",
              "previous": "https://api.jaramgroupware.cloud/hub/api/v1/post/?page=2",
              "results": [
                {
                  "comment_id": 1,
                  "comment_depth": 0,
                  "comment_content": "댓글댓글~~~",
                  "comment_write_time": "2023-01-04T21:39:20.619843",
                  "comment_update_time": "2023-01-04T21:39:20.619843",
                  "comment_delete": 0,
                  "post_post_id_pk": 1,
                  "member_member_pk": {
                    "member_pk": "nfkOJDM8492KKMKndods9_@IiNJJjd",
                    "member_nm": "이름이름"
                  },
                  "reply": [
                    {
                      "comment_id": 2,
                      "comment_depth": 1,
                      "comment_content": "답변댓글",
                      "comment_write_time": "2023-01-04T21:39:20.619843",
                      "comment_update_time": "2023-01-04T21:39:20.619843",
                      "comment_delete": 0,
                      "post_post_id_pk": 1,
                      "member_member_pk": {
                        "member_pk": "nfkOJDM8492KKMKndods9_@IiNJJjd",
                        "member_nm": "이름이름"
                      },
                      "reply": {}
                    }
                  ]
                }
              ]
            }
        ```
        - 변경된 응답 데이터
        ```json
            {
              "count": 123,
              "next": "https://api.jaramgroupware.cloud/hub/api/v1/post/?page=4",
              "previous": "https://api.jaramgroupware.cloud/hub/api/v1/post/?page=2",
              "results": [
                {
                  "comment_id": 1,
                  "comment_depth": 0,
                  "comment_content": "댓글댓글~~~",
                  "comment_write_time": "2023-10-23T16:08:15",
                  "comment_update_time": "2023-10-23T16:08:15",
                  "comment_delete": 0,
                  "post_post_id_pk": 1,
                  "member_member_pk": {
                    "member_pk": "nfkOJDM8492KKMKndods9_@IiNJJjd",
                    "member_nm": "이름이름"
                  },
                  "comment_comment_id_ref": 0
                },
                {
                  "comment_id": 2,
                  "comment_depth": 1,
                  "comment_content": "답변댓글",
                  "comment_write_time": "2023-10-23T16:08:15",
                  "comment_update_time": "2023-10-23T16:08:15",
                  "comment_delete": 0,
                  "post_post_id_pk": 1,
                  "member_member_pk": {
                    "member_pk": "nfkOJDM8492KKMKndods9_@IiNJJjd",
                    "member_nm": "이름이름"
                  },
                  "comment_comment_id_ref": 1
                }
              ]
            }
        ```
        
        기존 v1 url : /hub/v1/comment/?page=<page_id>에서는 reply 필드에 특정 댓글의 답글 댓글까지 같이 출력을 하는 형태였으나,     이는 답변 댓글이 중복으로 출력되어 같은 댓글이 두번이나 출력될 우려가 있었습니다.
        
        따라서 v2에서는 reply 필드를 삭제하고, comment_comment_id_ref 필드를 추가하여 답변 댓글의 부모 댓글의 id를 출력하도록 변경하였습니다.
        
        변경 사항에 맞춰서 답변 댓글을 출력하는 로직을 수정해주셔야 합니다. (예: 댓글에 답글 부분을 담을 리스트를 선언한 후,     comment_comment_id_ref에 값이 있는 경우 해당 댓글을 리스트에 추가 -> 댓글 컨테이너에 render하는 방식으로 구현)
        
    2. **url 끝부분에 슬래시 '/'를 붙이는 패턴을 RESTful하게 수정 -> (예: 기존 v1 url :
    /hub/v1/board/1/ -> v2 url : /hub/v2/board/1)**

        RESTful API에서 '/'는 계층을 구분하기 위해 사용되는 문자입니다.
        
        따라서 후행 슬래시(/)는 의미가 전혀 없고 혼란을 야기할 수 있기 때문에 제거하였습니다.
        
        쿼리 파라미터를 넣을 때에도 기존 v1에서는 /hub/v1/board/?page=1과 같이 ? 앞에 슬래시를 붙여서 쿼리 파라미터를 넣었지만,     v2에서는 /hub/v2/board?page=1과 같이 슬래시를 붙이지 않고 쿼리 파라미터를 넣어야 합니다.
        
        클라이언트 개발 시 서버로 url 요청을 보낼 때 슬래시에 유의하여 주시기 바랍니다.


    ## API 보안 규칙

    자람 허브 API를 포함한 Jaram Groupware의 모든 Back-end 서비스는 Gateway를 통해 요청을 보내는 유저의 정보를
    검증합니다.


    Jaram Groupware의 서비스로 Request를 보낼 때 유저의 정보를 명시하기 위해서는 다음과 같이 Request Header에
    유저 token을 명시해야합니다.


    ```json

    {
        "Authorization": "Bearer <유저의 token>"
    }

    ```


    **Jaram Groupware에서 사용하는 유저 token에 대한 정보는 자람 그룹웨어 노션 Docs에 기재된 'Jaram
    Groupware Applications' 중 'Token - 자람 허브 토큰 서비스'를 참고해주세요.**


    Gateway를 거쳐 유저 검증이 완료된 Request는 모두 다음과 같은 형식의 payload를 Request Header 메타데이터에
    포함하게 됩니다.


    ```json

    {
      "user_pk": "유저의 uid",
      "role_pk": "유저의 권한 pk",
    }

    ```


    위의 Request Header 메타데이터는 **Request Header에 유저 token이 포함되어 있다면** 자동으로 추가되며,
    자람 허브 API 문서에 HEADER PARAMETETS부분에 명시되어 있는 값들과 일치합니다.


    **따라서, API 개발 테스트 상황이 아닌 실제 라이브 서버에서 요청을 보낼 때에는 HEADER PARAMETETS에 명시된 값들을
    Request Header에 포함시키는 것이 아니라, 유저 token만 포함시켜서 Request를 보내면 됩니다.**


    Jaram Groupware의 서비스들에는 RBAC(Role Based Access Control)가 적용되어 있습니다.


    자람 허브 API는 헤더에 포함된 role_pk 정보를 바탕으로 유저의 권한을 확인하고, 유저가 요청한 API에 대한 권한이 있는지
    검증하는 로직이 존재합니다.


    유저가 가질 수 있는 Role(권한)은 다음과 같습니다.


    | Role name | Role description |

    | --- | --- |

    | ROLE_GUEST | 게스트 유저 |

    | ROLE_USER0 | 자람 수습회원, 준회원 |

    | ROLE_USER1 | 자람 정회원 |

    | ROLE_ADMIN | 자람 허브 관리자 |

    | ROLE_DEV | 자람 허브 개발자 |


    Gateway가 프록시하는 모든 Jaram Groupware 서비스는 각 endpoint 별로 유저 인증 필요 여부 및 인증 정보 범위를
    조절할 수 있습니다.

    배포 후 Gateway-Storm 서비스를 통해 서비스의 endpoint에 대한 유저 인증 여부 및 인증 정보 범위 설정 방법은 노션
    문서를 참고해주세요.


    만약 자람 허브의 특정 endpoint가 유저의 특정 권한 이상을 요구하는 경우, 설명 상단에 'RBAC - <유저의 권한>'으로
    표기되어 있습니다.


    그 외 요청에 유저 권한이 없는 경우는 'RBAC - ALL'로 표기되어 있습니다.


    특별한 경우(예: 게시글 작성자 본인이거나 관리자만 게시글 수정 가능)에는 'RBAC - AUTH'로 표기되어 있습니다.
  version: 2.0.0
paths:
  /hub/api/v2/ping:
    get:
      summary: Server health check
      description: FastAPI 서버가 정상적으로 동작하는지 확인합니다.
      operationId: ping_hub_api_v2_ping_get
      responses:
        '200':
          description: Ping Success
          content:
            application/json:
              schema:
                type: object
                title: Response Ping Hub Api V2 Ping Get
              example:
                ping: pong
  /hub/api/v2/board:
    get:
      tags:
        - board
      summary: 모든 게시판 목록 가져오기
      description: |-
        RBAC - ALL

        모든 게시판 목록을 가져옵니다.
      operationId: read_boards_hub_api_v2_board_get
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: 몇번째 페이지를 가져올지 지정합니다.
            default: 1
            title: Page
          description: 몇번째 페이지를 가져올지 지정합니다.
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            maximum: 150
            minimum: 1
            description: 한 페이지에 몇개의 데이터를 가져올지 지정합니다.
            default: 10
            title: Page Size
          description: 한 페이지에 몇개의 데이터를 가져올지 지정합니다.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_BoardSchema_'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    post:
      tags:
        - board
      summary: 게시판 생성
      description: |-
        RBAC - ROLE_ADMIN

        새로운 게시판을 생성합니다.
      operationId: create_board_hub_api_v2_board_post
      parameters:
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardCreateSchema'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
  /hub/api/v2/board/{board_id}:
    get:
      tags:
        - board
      summary: 특정 게시판 가져오기
      description: |-
        RBAC - ALL

        지정한 게시판의 데이터를 가져옵니다.
      operationId: read_board_hub_api_v2_board__board_id__get
      parameters:
        - name: board_id
          in: path
          required: true
          schema:
            type: integer
            title: Board Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 게시판을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/board/<invalid_board_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    patch:
      tags:
        - board
      summary: 게시판 수정 (부분 업데이트)
      description: |-
        RBAC - ROLE_ADMIN

        지정한 게시판의 데이터를 수정합니다. (전체, 부분 업데이트를 지원합니다)
      operationId: update_board_hub_api_v2_board__board_id__patch
      parameters:
        - name: board_id
          in: path
          required: true
          schema:
            type: integer
            title: Board Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardUpdateSchema'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 게시판을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/board/<invalid_board_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    put:
      tags:
        - board
      summary: 게시판 수정 (전체 업데이트)
      description: |-
        RBAC - ROLE_ADMIN

        지정한 게시판의 데이터를 수정합니다. (전체, 부분 업데이트를 지원합니다)
      operationId: update_board_hub_api_v2_board__board_id__put
      parameters:
        - name: board_id
          in: path
          required: true
          schema:
            type: integer
            title: Board Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardUpdateSchema'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 게시판을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/board/<invalid_board_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    delete:
      tags:
        - board
      summary: 게시판 삭제
      description: |-
        RBAC - ROLE_ADMIN

        지정한 게시판을 삭제합니다.
      operationId: delete_board_hub_api_v2_board__board_id__delete
      parameters:
        - name: board_id
          in: path
          required: true
          schema:
            type: integer
            title: Board Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      responses:
        '204':
          description: Successful Response
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 게시판을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/board/<invalid_board_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
  /hub/api/v2/post/list:
    get:
      tags:
        - post
      summary: 모든 게시글 목록 가져오기
      description: |-
        RBAC - ALL

        게시글 목록을 가져옵니다.

        결과로 가져오는 게시글은 content가 500자로 제한되어 리턴됩니다.

        모든 내용을 가져오려면 특정 게시글 가져오기 API를 사용해야합니다.
      operationId: read_posts_hub_api_v2_post_list_get
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: 몇번째 페이지를 가져올지 지정합니다.
            default: 1
            title: Page
          description: 몇번째 페이지를 가져올지 지정합니다.
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            description: 한 페이지에 몇개의 데이터를 가져올지 지정합니다.
            default: 10
            title: Page Size
          description: 한 페이지에 몇개의 데이터를 가져올지 지정합니다.
        - name: start_date
          in: query
          required: false
          schema:
            anyOf:
              - type: string
                format: date-time
              - type: 'null'
            description: 게시글을 지정한 날짜부터 작성된 글을 가져옵니다.
            title: Start Date
          description: 게시글을 지정한 날짜부터 작성된 글을 가져옵니다.
          example: '2023-02-10T01:00:00'
        - name: end_date
          in: query
          required: false
          schema:
            anyOf:
              - type: string
                format: date-time
              - type: 'null'
            description: 게시글을 지정한 날짜까지 작성된 글을 가져옵니다.
            title: End Date
          description: 게시글을 지정한 날짜까지 작성된 글을 가져옵니다.
          example: '2023-02-10T01:00:00'
        - name: writer_uid
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            description: uid의 사용자가 작성한 글을 가져옵니다.
            title: Writer Uid
          description: uid의 사용자가 작성한 글을 가져옵니다.
          example: SLDOqpd04867JDKVUqprod-203JI
        - name: writer_name
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            description: 지정한 이름을 가진 사용자가 작성한 글을 가져옵니다.
            title: Writer Name
          description: 지정한 이름을 가진 사용자가 작성한 글을 가져옵니다.
          example: 이준혁
        - name: board
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: 'null'
            description: 지정한 게시판에 작성된 글을 가져옵니다.
            title: Board
          description: 지정한 게시판에 작성된 글을 가져옵니다.
          example: 1
        - name: title
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            description: 지정한 단어가 제목에 포함된 글을 가져옵니다.
            title: Title
          description: 지정한 단어가 제목에 포함된 글을 가져옵니다.
          example: 테스트
        - name: order
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            description: 지정한 필드를 기준으로 정렬하여 게시글을 가져옵니다.
            title: Order
          description: 지정한 필드를 기준으로 정렬하여 게시글을 가져옵니다.
          example: id
        - name: desc
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: 'null'
            description: order가 존재할 때, desc을 1로 지정하면 역순으로 정렬하여 게시글을 가져옵니다.
            title: Desc
          description: order가 존재할 때, desc을 1로 지정하면 역순으로 정렬하여 게시글을 가져옵니다.
          example: 1
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_PostPreviewSchema_'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
  /hub/api/v2/post/{post_id}:
    get:
      tags:
        - post
      summary: 특정 게시글 가져오기
      description: |-
        RBAC - AUTH

        지정한 게시글의 데이터를 가져옵니다.

        요청한 유저의 권한이 가져오려는 게시글이 속한 게시판의 읽기 레벨과 같거나 더 높아야 글 읽기가 가능합니다.

        **Admin은 게시판의 읽기 권한과 상관 없이 글 읽기가 가능합니다.**
      operationId: read_post_hub_api_v2_post__post_id__get
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 게시글을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/post/<invalid_post_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    patch:
      tags:
        - post
      summary: 게시글 수정 (부분 업데이트)
      description: >-
        RBAC - AUTH


        지정한 게시글의 데이터를 수정합니다. (전체, 부분 업데이트를 지원합니다) 


        요청한 유저가 글을 작성한 본인이면서 요청한 유저의 권한이 수정하려는 게시글이 속한 게시판의 쓰기 레벨과 같거나 더 높아야 글
        수정이 가능합니다.


        **Admin도 본인이 아니면 글 수정이 불가능합니다.**
      operationId: update_post_hub_api_v2_post__post_id__patch
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateSchema'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 게시글을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/post/<invalid_post_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    put:
      tags:
        - post
      summary: 게시글 수정 (전체 업데이트)
      description: >-
        RBAC - AUTH


        지정한 게시글의 데이터를 수정합니다. (전체, 부분 업데이트를 지원합니다) 


        요청한 유저가 글을 작성한 본인이면서 요청한 유저의 권한이 수정하려는 게시글이 속한 게시판의 쓰기 레벨과 같거나 더 높아야 글
        수정이 가능합니다.


        **Admin도 본인이 아니면 글 수정이 불가능합니다.**
      operationId: update_post_hub_api_v2_post__post_id__put
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateSchema'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 게시글을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/post/<invalid_post_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    delete:
      tags:
        - post
      summary: 게시글 삭제
      description: |-
        RBAC - AUTH

        지정한 게시글을 삭제합니다.

        **글을 쓴 본인 또는 Admin만 삭제가 가능합니다.**
      operationId: delete_post_hub_api_v2_post__post_id__delete
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            title: Post Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      responses:
        '204':
          description: Successful Response
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 게시글을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/post/<invalid_post_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
  /hub/api/v2/post:
    post:
      tags:
        - post
      summary: 게시글 생성
      description: |-
        RBAC - AUTH

        새로운 게시글을 생성합니다. 

        쓰기 요청한 유저의 권한이 작성하려는 게시판의 쓰기 레벨과 같거나 더 높아야 글 작성이 가능합니다.

        **Admin은 게시판의 쓰기 권한과 상관 없이 글 작성이 가능합니다.**
      operationId: create_post_hub_api_v2_post_post
      parameters:
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateBase'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
  /hub/api/v2/comment:
    get:
      tags:
        - comment
      summary: 특정 게시글의 모든 댓글 가져오기
      description: |-
        RBAC - ALL

        특정 게시글의 모든 댓글을 가져옵니다.
      operationId: read_comments_hub_api_v2_comment_get
      parameters:
        - name: post_id
          in: query
          required: true
          schema:
            type: integer
            description: |-
              어떤 게시글에 작성된 댓글을 가져올지 지정합니다.     

              게시글 번호를 지정하지 않으면 422을 응답합니다.
            title: Post Id
          description: |-
            어떤 게시글에 작성된 댓글을 가져올지 지정합니다.     

            게시글 번호를 지정하지 않으면 422을 응답합니다.
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: 몇번째 페이지를 가져올지 지정합니다.
            default: 1
            title: Page
          description: 몇번째 페이지를 가져올지 지정합니다.
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            maximum: 25
            minimum: 1
            description: 한 페이지에 몇개의 데이터를 가져올지 지정합니다.
            default: 10
            title: Page Size
          description: 한 페이지에 몇개의 데이터를 가져올지 지정합니다.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_CommentSchema_'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    post:
      tags:
        - comment
      summary: 댓글 작성하기
      description: >-
        RBAC - AUTH


        특정 게시글에 댓글을 작성합니다. 


        쓰기 요청한 유저의 권한이 작성하려는 게시판의 댓글 쓰기 레벨
        (Board.role_role_pk_comment_write_level)과 같거나 더 높아야 글 작성이 가능합니다.


        **Admin은 게시판의 쓰기 권한과 상관 없이 댓글 작성이 가능합니다.**
      operationId: create_comment_hub_api_v2_comment_post
      parameters:
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateBase'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 댓글을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/comment/<invalid_comment_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
  /hub/api/v2/comment/{comment_id}:
    patch:
      tags:
        - comment
      summary: 댓글 수정하기 (부분 업데이트)
      description: >-
        RBAC - AUTH


        지정한 댓글의 데이터를 수정합니다 (전체, 부분 업데이트를 지원합니다). 


        요청한 유저가 댓글을 작성한 본인이면서 요청한 유저의 권한이 수정하려는 게시글이 속한 게시판의 댓글 쓰기 레벨과 같거나 더 높아야
        글 수정이 가능합니다.


        **Admin도 본인이 아니면 글 수정이 불가능합니다.**
      operationId: update_comment_hub_api_v2_comment__comment_id__patch
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            title: Comment Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateBase'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 댓글을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/comment/<invalid_comment_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    put:
      tags:
        - comment
      summary: 댓글 수정하기 (전체 업데이트)
      description: >-
        RBAC - AUTH


        지정한 댓글의 데이터를 수정합니다 (전체, 부분 업데이트를 지원합니다). 


        요청한 유저가 댓글을 작성한 본인이면서 요청한 유저의 권한이 수정하려는 게시글이 속한 게시판의 댓글 쓰기 레벨과 같거나 더 높아야
        글 수정이 가능합니다.


        **Admin도 본인이 아니면 글 수정이 불가능합니다.**
      operationId: update_comment_hub_api_v2_comment__comment_id__put
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            title: Comment Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateBase'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 댓글을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/comment/<invalid_comment_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
    delete:
      tags:
        - comment
      summary: 댓글 삭제하기
      description: |-
        RBAC - AUTH

        지정한 댓글을 삭제합니다. 

        **글을 쓴 본인 또는 Admin만 삭제가 가능합니다.**

        데이터를 실제로 삭제하지 않고 comment_delete를 1로 변경합니다.
      operationId: delete_comment_hub_api_v2_comment__comment_id__delete
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            title: Comment Id
        - name: user_pk
          in: header
          required: false
          schema:
            type: string
            description: 사용자의 고유 식별자입니다.
            title: User Pk
          description: 사용자의 고유 식별자입니다.
        - name: role_pk
          in: header
          required: false
          schema:
            type: integer
            description: 사용자의 이름입니다.
            title: Role Pk
          description: 사용자의 이름입니다.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentSchema'
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 403
                error: FORBIDDEN
                message: 해당 유저의 권한으로는 불가능한 작업입니다.
                errorCode: HB-AUTH-002
                path: /hub/api/v2/<some/endpoint>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                timestamp: '2023-12-11T13:12:47.209076Z'
                status: 404
                error: NOT_FOUND
                message: 해당 댓글을 찾을 수 없습니다.
                errorCode: HB-HTTP-002
                path: /hub/api/v2/comment/<invalid_comment_id>
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: UNKNOWN ERROR (서버 내부 로직 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionSchema'
components:
  schemas:
    BoardCreateSchema:
      properties:
        board_name:
          type: string
          title: Board's Name
          description: 게시판의 이름입니다.
        board_layout:
          type: integer
          title: Board's Layout
          description: 게시판의 레이아웃입니다.
        role_role_pk_write_level:
          type: integer
          title: Board's Write Level
          description: 게시판의 글 작성 권한입니다. (Role pk)
        role_role_pk_read_level:
          type: integer
          title: Board's Read Level
          description: 게시판의 글 읽기 권한입니다. (Role pk)
        role_role_pk_comment_write_level:
          type: integer
          title: Board's Comment Write Level
          description: 게시판의 댓글 작성 권한입니다. (Role pk)
      type: object
      required:
        - board_name
        - board_layout
        - role_role_pk_write_level
        - role_role_pk_read_level
        - role_role_pk_comment_write_level
      title: BoardCreateSchema
    BoardSchema:
      properties:
        board_id_pk:
          type: integer
          title: Board's ID (pk)
          description: 게시판의 고유 식별자입니다.
        board_name:
          type: string
          title: Board's Name
          description: 게시판의 이름입니다.
        board_layout:
          type: integer
          title: Board's Layout
          description: 게시판의 레이아웃입니다.
        role_role_pk_write_level:
          allOf:
            - $ref: '#/components/schemas/RoleSchema'
          title: Board's Write Level
          description: 게시판의 글 작성 권한입니다. (Role pk)
        role_role_pk_read_level:
          allOf:
            - $ref: '#/components/schemas/RoleSchema'
          title: Board's Read Level
          description: 게시판의 글 읽기 권한입니다. (Role pk)
        role_role_pk_comment_write_level:
          allOf:
            - $ref: '#/components/schemas/RoleSchema'
          title: Board's Comment Write Level
          description: 게시판의 댓글 작성 권한입니다. (Role pk)
      type: object
      required:
        - board_id_pk
        - board_name
        - board_layout
        - role_role_pk_write_level
        - role_role_pk_read_level
        - role_role_pk_comment_write_level
      title: BoardSchema
    BoardUpdateSchema:
      properties:
        board_name:
          type: string
          title: Board's Name
          description: 게시판의 이름입니다.
        board_layout:
          type: integer
          title: Board's Layout
          description: 게시판의 레이아웃입니다.
        role_role_pk_write_level:
          type: integer
          title: Board's Write Level
          description: 게시판의 글 작성 권한입니다. (Role pk)
        role_role_pk_read_level:
          type: integer
          title: Board's Read Level
          description: 게시판의 글 읽기 권한입니다. (Role pk)
        role_role_pk_comment_write_level:
          type: integer
          title: Board's Comment Write Level
          description: 게시판의 댓글 작성 권한입니다. (Role pk)
      type: object
      title: BoardUpdateSchema
    CommentCreateBase:
      properties:
        comment_depth:
          type: integer
          title: Comment's Depth
          description: 댓글의 깊이입니다. 생성할 데이터가 몇번째 깊이의 대댓글인지 표현합니다. 최상위 댓글은 0입니다.
        comment_content:
          type: string
          title: Comment's Content
          description: 댓글의 내용입니다. (plainText)
        comment_delete:
          type: integer
          title: Comment's Delete
          description: 댓글의 삭제 여부입니다. 초기에는 0으로 설정.
        post_post_id_pk:
          type: integer
          title: Comment's Post ID
          description: 댓글의 게시글 ID입니다.
        comment_comment_id_ref:
          anyOf:
            - type: integer
            - type: 'null'
          title: Comment's Comment ID
          description: 작성하려는 댓글의 부모 댓글 pk입니다. 최상위 댓글이라면 null.
      type: object
      required:
        - comment_depth
        - comment_content
        - comment_delete
        - post_post_id_pk
      title: CommentCreateBase
    CommentSchema:
      properties:
        comment_id:
          type: integer
          title: Comment's ID (pk)
          description: 댓글의 고유 식별자입니다.
        comment_depth:
          type: integer
          title: Comment's Depth
          description: 댓글의 깊이입니다.
        comment_content:
          type: string
          title: Comment's Content
          description: 댓글의 내용입니다.
        comment_write_time:
          type: string
          format: date-time
          title: Comment's Write Date
          description: 댓글의 작성일입니다.
        comment_update_time:
          type: string
          format: date-time
          title: Comment's Update Date
          description: 댓글의 수정일입니다.
        comment_delete:
          type: integer
          title: Comment's Delete
          description: 댓글의 삭제 여부입니다.
        post_post_id_pk:
          type: integer
          title: Comment's Post ID
          description: 댓글의 게시글 ID입니다.
        member_member_pk:
          allOf:
            - $ref: '#/components/schemas/MemberSchema'
          title: Comment's Member ID
          description: 댓글의 작성자 ID입니다.
        comment_comment_id_ref:
          anyOf:
            - type: integer
            - type: 'null'
          title: Comment's Comment ID
          description: 댓글의 댓글 ID입니다.
      type: object
      required:
        - comment_id
        - comment_depth
        - comment_content
        - comment_write_time
        - comment_update_time
        - comment_delete
        - post_post_id_pk
        - member_member_pk
      title: CommentSchema
    CommentUpdateBase:
      properties:
        comment_depth:
          anyOf:
            - type: integer
            - type: 'null'
          title: Comment's Depth
          description: 댓글의 깊이입니다. 생성할 데이터가 몇번째 깊이의 대댓글인지 표현합니다. 최상위 댓글은 0입니다.
        comment_content:
          anyOf:
            - type: string
            - type: 'null'
          title: Comment's Content
          description: 댓글의 내용입니다. (plainText)
        comment_delete:
          anyOf:
            - type: integer
            - type: 'null'
          title: Comment's Delete
          description: 댓글의 삭제 여부입니다. 초기에는 0으로 설정.
        post_post_id_pk:
          anyOf:
            - type: integer
            - type: 'null'
          title: Comment's Post ID
          description: 댓글의 게시글 ID입니다.
        comment_comment_id_ref:
          anyOf:
            - type: integer
            - type: 'null'
          title: Comment's Comment ID
          description: 작성하려는 댓글의 부모 댓글 pk입니다. 최상위 댓글이라면 null.
      type: object
      title: CommentUpdateBase
    ExceptionSchema:
      properties:
        timestamp:
          type: string
          title: Timestamp
          description: 에러가 발생한 시간입니다.
        status:
          type: integer
          title: Status
          description: 에러의 HTTP status code 입니다.
        error:
          type: string
          title: Error
          description: 에러의 이름입니다.
        message:
          type: string
          title: Message
          description: 에러의 메시지 내용입니다.
        errorCode:
          type: string
          title: Errorcode
          description: 에러의 코드입니다.
        path:
          type: string
          title: Path
          description: 에러가 발생한 경로입니다.
      type: object
      required:
        - timestamp
        - status
        - error
        - message
        - errorCode
        - path
      title: ExceptionSchema
      example:
        default:
          timestamp: '2021-10-17T16:55:00.000000Z'
          status: 500
          error: INTERNAL_SERVER_ERROR
          message: 서버 로직에 알 수 없는 오류가 발생했습니다.
          errorCode: HB-GENL-000
          path: /hub/api/v2/<some/endpoint>
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    MemberSchema:
      properties:
        member_pk:
          type: string
          title: Member's ID (pk)
          description: 회원의 고유 식별자입니다.
        member_nm:
          type: string
          title: Member's Name
          description: 회원의 이름입니다.
      type: object
      required:
        - member_pk
        - member_nm
      title: MemberSchema
    PaginatedResponse_BoardSchema_:
      properties:
        count:
          type: integer
          title: Count
          description: 불러온 아이템 전체 개수를 나타냅니다.
        next:
          anyOf:
            - type: string
              minLength: 1
              format: uri
            - type: 'null'
          title: Next
          description: 데이터를 불러올 다음 페이지의 URL을 나타냅니다.
        previous:
          anyOf:
            - type: string
              minLength: 1
              format: uri
            - type: 'null'
          title: Previous
          description: 데이터를 불러왔던 이전 페이지의 URL을 나타냅니다.
        results:
          items:
            $ref: '#/components/schemas/BoardSchema'
          type: array
          title: Results
          description: 불러온 아이템들의 정보들을 리스트로 나타냅니다.
      type: object
      required:
        - count
        - results
      title: PaginatedResponse[BoardSchema]
    PaginatedResponse_CommentSchema_:
      properties:
        count:
          type: integer
          title: Count
          description: 불러온 아이템 전체 개수를 나타냅니다.
        next:
          anyOf:
            - type: string
              minLength: 1
              format: uri
            - type: 'null'
          title: Next
          description: 데이터를 불러올 다음 페이지의 URL을 나타냅니다.
        previous:
          anyOf:
            - type: string
              minLength: 1
              format: uri
            - type: 'null'
          title: Previous
          description: 데이터를 불러왔던 이전 페이지의 URL을 나타냅니다.
        results:
          items:
            $ref: '#/components/schemas/CommentSchema'
          type: array
          title: Results
          description: 불러온 아이템들의 정보들을 리스트로 나타냅니다.
      type: object
      required:
        - count
        - results
      title: PaginatedResponse[CommentSchema]
    PaginatedResponse_PostPreviewSchema_:
      properties:
        count:
          type: integer
          title: Count
          description: 불러온 아이템 전체 개수를 나타냅니다.
        next:
          anyOf:
            - type: string
              minLength: 1
              format: uri
            - type: 'null'
          title: Next
          description: 데이터를 불러올 다음 페이지의 URL을 나타냅니다.
        previous:
          anyOf:
            - type: string
              minLength: 1
              format: uri
            - type: 'null'
          title: Previous
          description: 데이터를 불러왔던 이전 페이지의 URL을 나타냅니다.
        results:
          items:
            $ref: '#/components/schemas/PostPreviewSchema'
          type: array
          title: Results
          description: 불러온 아이템들의 정보들을 리스트로 나타냅니다.
      type: object
      required:
        - count
        - results
      title: PaginatedResponse[PostPreviewSchema]
    PostCreateBase:
      properties:
        post_title:
          type: string
          title: Post's Title
          description: 게시글의 제목입니다.
        post_content:
          type: string
          title: Post's Content
          description: 게시글의 내용입니다.
        post_write_time:
          type: string
          format: date-time
          title: Post's Write Date
          description: 게시글의 작성일입니다.
        post_update_time:
          type: string
          format: date-time
          title: Post's Update Date
          description: 게시글의 수정일입니다.
        thumbnail_id_pk:
          anyOf:
            - type: integer
            - type: 'null'
          title: Post's Thumbnail ID
          description: 게시글의 썸네일 ID입니다.
        board_board_id_pk:
          type: integer
          title: Post's Board ID
          description: 게시글의 게시판 ID입니다.
      type: object
      required:
        - post_title
        - post_content
        - post_write_time
        - post_update_time
        - board_board_id_pk
      title: PostCreateBase
    PostPreviewSchema:
      properties:
        post_id_pk:
          type: integer
          title: Post's ID (pk)
          description: 게시글의 고유 식별자입니다.
        post_title:
          type: string
          title: Post's Title
          description: 게시글의 제목입니다.
        post_write_time:
          type: string
          format: date-time
          title: Post's Write Date
          description: 게시글의 작성일입니다.
        post_update_time:
          type: string
          format: date-time
          title: Post's Update Date
          description: 게시글의 수정일입니다.
        thumbnail_id_pk:
          anyOf:
            - type: integer
            - type: 'null'
          title: Post's Thumbnail ID
          description: 게시글의 썸네일 ID입니다.
        board_board_id_pk:
          allOf:
            - $ref: '#/components/schemas/BoardSchema'
          title: Post's Board ID
          description: 게시글의 게시판 ID입니다.
        member_member_pk:
          allOf:
            - $ref: '#/components/schemas/MemberSchema'
          title: Post's Member ID
          description: 게시글의 작성자 ID입니다.
        post_content:
          type: string
          title: Post's Content
          description: 게시글의 내용입니다.
      type: object
      required:
        - post_id_pk
        - post_title
        - post_write_time
        - post_update_time
        - board_board_id_pk
        - post_content
      title: PostPreviewSchema
    PostSchema:
      properties:
        post_id_pk:
          type: integer
          title: Post's ID (pk)
          description: 게시글의 고유 식별자입니다.
        post_title:
          type: string
          title: Post's Title
          description: 게시글의 제목입니다.
        post_write_time:
          type: string
          format: date-time
          title: Post's Write Date
          description: 게시글의 작성일입니다.
        post_update_time:
          type: string
          format: date-time
          title: Post's Update Date
          description: 게시글의 수정일입니다.
        thumbnail_id_pk:
          anyOf:
            - type: integer
            - type: 'null'
          title: Post's Thumbnail ID
          description: 게시글의 썸네일 ID입니다.
        board_board_id_pk:
          allOf:
            - $ref: '#/components/schemas/BoardSchema'
          title: Post's Board ID
          description: 게시글의 게시판 ID입니다.
        member_member_pk:
          allOf:
            - $ref: '#/components/schemas/MemberSchema'
          title: Post's Member ID
          description: 게시글의 작성자 ID입니다.
        post_content:
          type: string
          title: Post's Content
          description: 게시글의 내용입니다.
      type: object
      required:
        - post_id_pk
        - post_title
        - post_write_time
        - post_update_time
        - board_board_id_pk
        - post_content
      title: PostSchema
    PostUpdateSchema:
      properties:
        post_title:
          type: string
          title: Post's Title
          description: 게시글의 제목입니다.
        post_content:
          type: string
          title: Post's Content
          description: 게시글의 내용입니다.
        post_update_time:
          type: string
          format: date-time
          title: Post's Update Date
          description: 게시글의 수정일입니다.
        thumbnail_id_pk:
          anyOf:
            - type: integer
            - type: 'null'
          title: Post's Thumbnail ID
          description: 게시글의 썸네일 ID입니다.
        board_board_id_pk:
          type: integer
          title: Post's Board ID
          description: 게시글의 게시판 ID입니다.
      type: object
      title: PostUpdateSchema
    RoleSchema:
      properties:
        role_pk:
          type: integer
          title: Role's ID (pk)
          description: 권한의 고유 식별자입니다.
        role_nm:
          type: string
          title: Role's Name
          description: 권한의 이름입니다.
      type: object
      required:
        - role_pk
        - role_nm
      title: RoleSchema
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
tags:
  - name: board
    description: |-
      게시판 카테고리 API 입니다. 

      현재 자람 허브에서는 3개의 게시판만 운용하고 있으나, 추후 게시판 확장을 염두하여 API가 설계되었습니다.
  - name: post
    description: 게시글 API 입니다.
  - name: comment
    description: 댓글 API 입니다.
